import React, { useState, useEffect, useRef } from 'react';
import { toast } from 'react-toastify';

const Chatbot = () => {
    const [isOpen, setIsOpen] = useState(false);
    const [messages, setMessages] = useState([]);
    const [inputMessage, setInputMessage] = useState('');
    const [isListening, setIsListening] = useState(false);
    const [language, setLanguage] = useState('en');
    const [isSpeaking, setIsSpeaking] = useState(false);
    
    const messagesEndRef = useRef(null);
    const recognitionRef = useRef(null);
    const speechRef = useRef(null);

    // HealthForge knowledge base
    const knowledge = {
        en: {
            greetings: ['hi', 'hello', 'hey', 'good morning', 'good afternoon', 'good evening'],
            welcome: "Hello! Welcome to HealthForge! I'm your AI assistant. I can help you with booking appointments, finding doctors, emergency services, and platform navigation. How can I assist you today?",
            register: "To register on HealthForge:\n1. Click 'Login' in the top navigation\n2. Click 'Create Account' or 'Sign Up'\n3. Fill in your details\n4. Click 'Register'\nYou'll be redirected to your dashboard after successful registration.",
            bookAppointment: "To book an appointment:\n1. Login to your account\n2. Go to your dashboard\n3. Click 'Book Appointment'\n4. Select a specialist\n5. Choose a doctor\n6. Select date and time slot\n7. Review and confirm booking",
            about: "HealthForge is a comprehensive healthcare platform that connects patients with qualified doctors. Our services include doctor consultations, specialist appointments, emergency services, ambulance services, and patient management.",
            services: "HealthForge provides:\nüè• Doctor Consultations\nüöë Emergency Services\nüìã Patient Management\nüí¨ Support Services",
            navigation: "Navigate HealthForge:\nMain Website: Home, About, Doctors, Contact, Emergency, Login/Register\nUser Dashboard: Dashboard, My Profile, Book Appointment, My Appointments, Emergency, Feedback, Complaints",
            emergency: "HealthForge Emergency Services:\nüö® 24/7 Emergency Support\nüìû Click 'Emergency' in navigation\nüÜò GPS location tracking and quick response",
            feedback: "Submit feedback:\n1. Login to your dashboard\n2. Click 'Feedback' in sidebar\n3. Rate your experience\n4. Write detailed feedback\n5. Submit your review",
            complaints: "File a complaint:\n1. Login to your dashboard\n2. Click 'Complaints' in sidebar\n3. Select complaint category\n4. Describe the issue\n5. Submit for review",
            default: "I can only provide information related to HealthForge. Please ask me about our services, appointments, emergency services, or platform navigation."
        },
        hi: {
            greetings: ['‡§®‡§Æ‡§∏‡•ç‡§§‡•á', '‡§π‡•à‡§≤‡•ã', '‡§π‡§æ‡§Ø', '‡§∏‡•Å‡§™‡•ç‡§∞‡§≠‡§æ‡§§', '‡§∂‡•Å‡§≠ ‡§¶‡•ã‡§™‡§π‡§∞', '‡§∂‡•Å‡§≠ ‡§∏‡§Ç‡§ß‡•ç‡§Ø‡§æ'],
            welcome: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! HealthForge ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ AI ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•Ç‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó, ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ñ‡•ã‡§ú‡§®‡•á, ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡•á‡§µ‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?",
            register: "HealthForge ‡§™‡§∞ ‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è:\n1. ‡§∂‡•Ä‡§∞‡•ç‡§∑ ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§∂‡§® ‡§Æ‡•á‡§Ç '‡§≤‡•â‡§ó‡§ø‡§®' ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç\n2. '‡§ñ‡§æ‡§§‡§æ ‡§¨‡§®‡§æ‡§è‡§Ç' ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç\n3. ‡§Ö‡§™‡§®‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§≠‡§∞‡•á‡§Ç\n4. '‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£' ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç",
            bookAppointment: "‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§¨‡•Å‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è:\n1. ‡§Ö‡§™‡§®‡•á ‡§ñ‡§æ‡§§‡•á ‡§Æ‡•á‡§Ç ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç\n2. ‡§Ö‡§™‡§®‡•á ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Ç\n3. '‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§¨‡•Å‡§ï ‡§ï‡§∞‡•á‡§Ç' ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç\n4. ‡§è‡§ï ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§ö‡•Å‡§®‡•á‡§Ç\n5. ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç\n6. ‡§§‡§ø‡§•‡§ø ‡§î‡§∞ ‡§∏‡§Æ‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç\n7. ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡•Ä ‡§™‡•Å‡§∑‡•ç‡§ü‡§ø ‡§ï‡§∞‡•á‡§Ç",
            about: "HealthForge ‡§è‡§ï ‡§µ‡•ç‡§Ø‡§æ‡§™‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§™‡•ç‡§≤‡•á‡§ü‡§´‡•â‡§∞‡•ç‡§Æ ‡§π‡•à ‡§ú‡•ã ‡§∞‡•ã‡§ó‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§°‡•â‡§ï‡•ç‡§ü‡§∞‡•ã‡§Ç ‡§∏‡•á ‡§ú‡•ã‡§°‡§º‡§§‡§æ ‡§π‡•à‡•§ ‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§∏‡•á‡§µ‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂, ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü, ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡•á‡§µ‡§æ‡§è‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•à‡§Ç‡•§",
            services: "HealthForge ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à:\nüè• ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂\nüöë ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡•á‡§µ‡§æ‡§è‡§Ç\nüìã ‡§∞‡•ã‡§ó‡•Ä ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®\nüí¨ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§∏‡•á‡§µ‡§æ‡§è‡§Ç",
            navigation: "HealthForge ‡§Æ‡•á‡§Ç ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç:\n‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü: ‡§π‡•ã‡§Æ, ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç, ‡§°‡•â‡§ï‡•ç‡§ü‡§∞, ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï, ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤, ‡§≤‡•â‡§ó‡§ø‡§®/‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£\n‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°: ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°, ‡§Æ‡•á‡§∞‡•Ä ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤, ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§¨‡•Å‡§ï ‡§ï‡§∞‡•á‡§Ç, ‡§Æ‡•á‡§∞‡•á ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü, ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤, ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ, ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡•á‡§Ç",
            emergency: "HealthForge ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡•á‡§µ‡§æ‡§è‡§Ç:\nüö® 24/7 ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ\nüìû ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§∂‡§® ‡§Æ‡•á‡§Ç '‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤' ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç\nüÜò GPS ‡§∏‡•ç‡§•‡§æ‡§® ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó ‡§î‡§∞ ‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ",
            feedback: "‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡•á‡§Ç:\n1. ‡§Ö‡§™‡§®‡•á ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° ‡§Æ‡•á‡§Ç ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç\n2. ‡§∏‡§æ‡§á‡§°‡§¨‡§æ‡§∞ ‡§Æ‡•á‡§Ç '‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ' ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç\n3. ‡§Ö‡§™‡§®‡•á ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§ï‡•ã ‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç\n4. ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§≤‡§ø‡§ñ‡•á‡§Ç\n5. ‡§Ö‡§™‡§®‡•Ä ‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡•á‡§Ç",
            complaints: "‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç:\n1. ‡§Ö‡§™‡§®‡•á ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° ‡§Æ‡•á‡§Ç ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç\n2. ‡§∏‡§æ‡§á‡§°‡§¨‡§æ‡§∞ ‡§Æ‡•á‡§Ç '‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡•á‡§Ç' ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç\n3. ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç\n4. ‡§Æ‡•Å‡§¶‡•ç‡§¶‡§æ ‡§µ‡§∞‡•ç‡§£‡§® ‡§ï‡§∞‡•á‡§Ç\n5. ‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡•á‡§Ç",
            default: "‡§Æ‡•à‡§Ç ‡§ï‡•á‡§µ‡§≤ HealthForge ‡§∏‡•á ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§∏‡•á‡§µ‡§æ‡§ì‡§Ç, ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü, ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡•á‡§µ‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§"
        }
    };

    // Initialize speech recognition and synthesis
    useEffect(() => {
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            recognitionRef.current = new SpeechRecognition();
            recognitionRef.current.continuous = false;
            recognitionRef.current.interimResults = false;
            recognitionRef.current.lang = language === 'en' ? 'en-US' : 'hi-IN';
            
            recognitionRef.current.onresult = (event) => {
                const transcript = event.results[0][0].transcript;
                setInputMessage(transcript);
                handleSendMessage(transcript);
                setIsListening(false);
            };
            
            recognitionRef.current.onerror = (event) => {
                console.error('Speech recognition error:', event.error);
                setIsListening(false);
                toast.error(language === 'en' ? 'Speech recognition failed' : '‡§≠‡§æ‡§∑‡§£ ‡§™‡§π‡§ö‡§æ‡§® ‡§µ‡§ø‡§´‡§≤');
            };
        }

        if ('speechSynthesis' in window) {
            speechRef.current = window.speechSynthesis;
        }

        // Add welcome message
        const welcomeMessage = knowledge[language].welcome;
        setMessages([{
            id: 1,
            text: welcomeMessage,
            sender: 'bot',
            timestamp: new Date()
        }]);

        return () => {
            if (recognitionRef.current) {
                recognitionRef.current.abort();
            }
        };
    }, [language]);

    // Auto-scroll to bottom
    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages]);

    // Process user input and generate response
    const processUserInput = (input) => {
        const lowerInput = input.toLowerCase().trim();
        const currentKnowledge = knowledge[language];
        
        // Check for greetings
        if (currentKnowledge.greetings.some(greeting => lowerInput.includes(greeting))) {
            return currentKnowledge.welcome;
        }
        
        // Check for registration
        if (lowerInput.includes('register') || lowerInput.includes('sign up') || lowerInput.includes('create account') || 
            lowerInput.includes('‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£') || lowerInput.includes('‡§ñ‡§æ‡§§‡§æ ‡§¨‡§®‡§æ‡§è‡§Ç')) {
            return currentKnowledge.register;
        }
        
        // Check for appointment booking
        if (lowerInput.includes('book') || lowerInput.includes('appointment') || lowerInput.includes('schedule') ||
            lowerInput.includes('‡§¨‡•Å‡§ï') || lowerInput.includes('‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü')) {
            return currentKnowledge.bookAppointment;
        }
        
        // Check for about HealthForge
        if (lowerInput.includes('what is') || lowerInput.includes('about') || lowerInput.includes('healthforge') ||
            lowerInput.includes('‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à') || lowerInput.includes('‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç')) {
            return currentKnowledge.about;
        }
        
        // Check for services
        if (lowerInput.includes('service') || lowerInput.includes('provide') || lowerInput.includes('offer') ||
            lowerInput.includes('‡§∏‡•á‡§µ‡§æ') || lowerInput.includes('‡§™‡•ç‡§∞‡§¶‡§æ‡§®')) {
            return currentKnowledge.services;
        }
        
        // Check for navigation
        if (lowerInput.includes('navigate') || lowerInput.includes('how to use') || lowerInput.includes('menu') ||
            lowerInput.includes('‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§ü') || lowerInput.includes('‡§ï‡•à‡§∏‡•á ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç')) {
            return currentKnowledge.navigation;
        }
        
        // Check for emergency
        if (lowerInput.includes('emergency') || lowerInput.includes('ambulance') || lowerInput.includes('urgent') ||
            lowerInput.includes('‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤') || lowerInput.includes('‡§è‡§Æ‡•ç‡§¨‡•Å‡§≤‡•á‡§Ç‡§∏')) {
            return currentKnowledge.emergency;
        }
        
        // Check for feedback
        if (lowerInput.includes('feedback') || lowerInput.includes('review') || lowerInput.includes('rating') ||
            lowerInput.includes('‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ') || lowerInput.includes('‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ')) {
            return currentKnowledge.feedback;
        }
        
        // Check for complaints
        if (lowerInput.includes('complaint') || lowerInput.includes('issue') || lowerInput.includes('problem') ||
            lowerInput.includes('‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§') || lowerInput.includes('‡§Æ‡•Å‡§¶‡•ç‡§¶‡§æ')) {
            return currentKnowledge.complaints;
        }
        
        return currentKnowledge.default;
    };

    // Handle sending message
    const handleSendMessage = (message = inputMessage) => {
        if (!message.trim()) return;
        
        const userMessage = {
            id: Date.now(),
            text: message,
            sender: 'user',
            timestamp: new Date()
        };
        
        setMessages(prev => [...prev, userMessage]);
        setInputMessage('');
        
        // Generate bot response
        setTimeout(() => {
            const botResponse = processUserInput(message);
            const botMessage = {
                id: Date.now() + 1,
                text: botResponse,
                sender: 'bot',
                timestamp: new Date()
            };
            
            setMessages(prev => [...prev, botMessage]);
            speakText(botResponse);
        }, 500);
    };

    // Text-to-speech function
    const speakText = (text) => {
        if (speechRef.current) {
            speechRef.current.cancel();
            
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = language === 'en' ? 'en-US' : 'hi-IN';
            utterance.rate = 0.9;
            utterance.pitch = 1;
            
            utterance.onstart = () => setIsSpeaking(true);
            utterance.onend = () => setIsSpeaking(false);
            utterance.onerror = () => setIsSpeaking(false);
            
            speechRef.current.speak(utterance);
        }
    };

    // Toggle speech recognition
    const toggleListening = () => {
        if (!recognitionRef.current) {
            toast.error(language === 'en' ? 'Speech recognition not supported' : '‡§≠‡§æ‡§∑‡§£ ‡§™‡§π‡§ö‡§æ‡§® ‡§∏‡§Æ‡§∞‡•ç‡§•‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à');
            return;
        }
        
        if (isListening) {
            recognitionRef.current.stop();
            setIsListening(false);
        } else {
            recognitionRef.current.start();
            setIsListening(true);
        }
    };

    // Handle Enter key
    const handleKeyPress = (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSendMessage();
        }
    };

    // Toggle language
    const toggleLanguage = () => {
        setLanguage(prev => prev === 'en' ? 'hi' : 'en');
        setMessages([]);
    };

  return (
    <>
      {/* Chatbot Toggle Button */}
      <div className="fixed bottom-6 right-6 z-50">
        <button
          onClick={() => setIsOpen(!isOpen)}
          className="bg-blue-600 hover:bg-blue-700 text-white rounded-full p-4 shadow-lg transition-all duration-300 transform hover:scale-110"
          title={language === 'en' ? 'Chat with HealthForge Assistant' : 'HealthForge Assistant ‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç'}
        >
          {isOpen ? (
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          ) : (
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
            </svg>
          )}
        </button>
      </div>

      {/* Chat Window */}
      {isOpen && (
        <div className="fixed bottom-24 right-6 w-96 h-[500px] bg-white rounded-lg shadow-2xl border border-gray-200 z-50 flex flex-col">
          {/* Chat Header */}
          <div className="bg-blue-600 text-white p-4 rounded-t-lg flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-white rounded-full flex items-center justify-center">
                <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                </svg>
              </div>
              <div>
                <h3 className="font-semibold">HealthForge Assistant</h3>
                <p className="text-sm opacity-90">
                  {language === 'en' ? 'AI Healthcare Assistant' : 'AI ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§ï'}
                </p>
              </div>
            </div>
            
            {/* Language Toggle */}
            <button
              onClick={toggleLanguage}
              className="bg-white bg-opacity-20 hover:bg-opacity-30 rounded-full p-2 transition-all duration-200"
              title={language === 'en' ? 'Switch to Hindi' : '‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡•á‡§Ç'}
            >
              {language === 'en' ? '‡§π‡§ø‡§Ç' : 'EN'}
            </button>
          </div>

          {/* Messages Area */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                    message.sender === 'user'
                      ? 'bg-blue-600 text-white'
                      : 'bg-gray-100 text-gray-800'
                  }`}
                >
                  <div className="whitespace-pre-line">{message.text}</div>
                  <div className={`text-xs mt-1 ${
                    message.sender === 'user' ? 'text-blue-100' : 'text-gray-500'
                  }`}>
                    {message.timestamp.toLocaleTimeString()}
                  </div>
                </div>
              </div>
            ))}
            <div ref={messagesEndRef} />
          </div>

          {/* Input Area */}
          <div className="p-4 border-t border-gray-200">
            <div className="flex space-x-2">
              <div className="flex-1 relative">
                <textarea
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder={language === 'en' ? 'Type your message...' : '‡§Ö‡§™‡§®‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≤‡§ø‡§ñ‡•á‡§Ç...'}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-blue-500"
                  rows="1"
                  style={{ minHeight: '40px', maxHeight: '100px' }}
                />
              </div>
              
              {/* Voice Input Button */}
              <button
                onClick={toggleListening}
                className={`p-2 rounded-lg transition-all duration-200 ${
                  isListening
                    ? 'bg-red-500 text-white animate-pulse'
                    : 'bg-gray-200 hover:bg-gray-300 text-gray-600'
                }`}
                title={language === 'en' ? 'Voice Input' : '‡§Ü‡§µ‡§æ‡§ú ‡§á‡§®‡§™‡•Å‡§ü'}
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z" />
                </svg>
              </button>
              
              {/* Send Button */}
              <button
                onClick={() => handleSendMessage()}
                disabled={!inputMessage.trim()}
                className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-300 text-white p-2 rounded-lg transition-all duration-200"
                title={language === 'en' ? 'Send Message' : '‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡•á‡§Ç'}
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                </svg>
              </button>
            </div>
            
            {/* Status Indicators */}
            <div className="flex items-center justify-between mt-2 text-xs text-gray-500">
              <div className="flex items-center space-x-2">
                {isListening && (
                  <div className="flex items-center space-x-1">
                    <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                    <span>{language === 'en' ? 'Listening...' : '‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•à...'}</span>
                  </div>
                )}
                {isSpeaking && (
                  <div className="flex items-center space-x-1">
                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                    <span>{language === 'en' ? 'Speaking...' : '‡§¨‡•ã‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à...'}</span>
                  </div>
                )}
              </div>
              <span>{language === 'en' ? 'AI Assistant' : 'AI ‡§∏‡§π‡§æ‡§Ø‡§ï'}</span>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default Chatbot;
